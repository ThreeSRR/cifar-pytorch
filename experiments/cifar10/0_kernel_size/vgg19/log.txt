{'architecture': 'vgg19', 'data_path': './data', 'ckpt_path': './', 'ckpt_name': 'vgg19', 'num_classes': 10, 'dataset': 'cifar10', 'use_gpu': True, 'input_size': 32, 'epochs': 250, 'batch_size': 128, 'test_batch': 200, 'eval_freq': 2, 'workers': 4, 'optimize': {'momentum': 0.9, 'weight_decay': 0.0001, 'nesterov': True}, 'mixup': False, 'mixup_alpha': 0.4, 'augmentation': {'normalize': True, 'random_crop': True, 'random_horizontal_filp': True, 'cutout': False, 'holes': 1, 'length': 8}, 'lr_scheduler': {'type': 'STEP', 'base_lr': 0.1, 'lr_epochs': [100, 150, 200], 'lr_mults': 0.1, 'min_lr': 0.0, 'lower_bound': -6.0, 'upper_bound': 3.0}}
{'architecture': 'vgg19', 'data_path': './data', 'ckpt_path': './', 'ckpt_name': 'vgg19', 'num_classes': 10, 'dataset': 'cifar10', 'kernel_size': [5, 5, 3, 3, 3], 'use_gpu': True, 'input_size': 32, 'epochs': 250, 'batch_size': 128, 'test_batch': 200, 'eval_freq': 2, 'workers': 4, 'optimize': {'momentum': 0.9, 'weight_decay': 0.0001, 'nesterov': True}, 'mixup': False, 'mixup_alpha': 0.4, 'augmentation': {'normalize': True, 'random_crop': True, 'random_horizontal_filp': True, 'cutout': False, 'holes': 1, 'length': 8}, 'lr_scheduler': {'type': 'STEP', 'base_lr': 0.1, 'lr_epochs': [100, 150, 200], 'lr_mults': 0.1, 'min_lr': 0.0, 'lower_bound': -6.0, 'upper_bound': 3.0}}
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (27): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (34): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (35): ReLU(inplace=True)
    (36): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (37): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (38): ReLU(inplace=True)
    (39): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (44): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (45): ReLU(inplace=True)
    (46): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (47): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (48): ReLU(inplace=True)
    (49): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (50): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (51): ReLU(inplace=True)
    (52): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Linear(in_features=512, out_features=10, bias=True)
)
 == total parameters: 20040522
            =======  Training  =======

 === Epoch: [1/250] === 
   == step: [100/391], train loss: 3.181 | train acc: 11.484% | lr: 0.100000
   == step: [200/391], train loss: 2.687 | train acc: 13.816% | lr: 0.100000
   == step: [300/391], train loss: 2.486 | train acc: 15.383% | lr: 0.100000
   == step: [391/391], train loss: 2.383 | train acc: 16.142% | lr: 0.100000
   == cost time: 44.4379s
 === Validate ===
   == test loss: 2.210 | test acc: 12.800%
 === Epoch: [2/250] === 
   == step: [100/391], train loss: 1.983 | train acc: 17.906% | lr: 0.100000
   == step: [200/391], train loss: 1.975 | train acc: 18.453% | lr: 0.100000
   == step: [300/391], train loss: 1.969 | train acc: 18.505% | lr: 0.100000
   == step: [391/391], train loss: 1.963 | train acc: 18.552% | lr: 0.100000
   == cost time: 42.4040s
 === Validate ===
   == test loss: 2.527 | test acc: 10.400%
 === Epoch: [3/250] === 
   == step: [100/391], train loss: 1.928 | train acc: 19.609% | lr: 0.100000
   == step: [200/391], train loss: 1.926 | train acc: 19.582% | lr: 0.100000
   == step: [300/391], train loss: 1.925 | train acc: 19.641% | lr: 0.100000
   == step: [391/391], train loss: 1.924 | train acc: 19.704% | lr: 0.100000
   == cost time: 44.5204s
 === Epoch: [4/250] === 
   == step: [100/391], train loss: 1.912 | train acc: 19.141% | lr: 0.100000
   == step: [200/391], train loss: 1.972 | train acc: 18.625% | lr: 0.100000
   == step: [300/391], train loss: 1.952 | train acc: 18.969% | lr: 0.100000
   == step: [391/391], train loss: 1.940 | train acc: 19.486% | lr: 0.100000
   == cost time: 42.6790s
 === Validate ===
   == test loss: 2.119 | test acc: 18.150%
 === Epoch: [5/250] === 
   == step: [100/391], train loss: 1.906 | train acc: 20.508% | lr: 0.100000
   == step: [200/391], train loss: 1.899 | train acc: 20.820% | lr: 0.100000
   == step: [300/391], train loss: 1.920 | train acc: 20.336% | lr: 0.100000
   == step: [391/391], train loss: 1.916 | train acc: 20.400% | lr: 0.100000
   == cost time: 43.6055s
 === Epoch: [6/250] === 
   == step: [100/391], train loss: 1.901 | train acc: 21.297% | lr: 0.100000
   == step: [200/391], train loss: 1.894 | train acc: 21.426% | lr: 0.100000
   == step: [300/391], train loss: 1.888 | train acc: 21.758% | lr: 0.100000
   == step: [391/391], train loss: 1.890 | train acc: 21.918% | lr: 0.100000
   == cost time: 43.7446s
 === Validate ===
   == test loss: 2.897 | test acc: 10.200%
 === Epoch: [7/250] === 
   == step: [100/391], train loss: 1.885 | train acc: 23.086% | lr: 0.100000
   == step: [200/391], train loss: 1.874 | train acc: 23.250% | lr: 0.100000
   == step: [300/391], train loss: 1.895 | train acc: 23.297% | lr: 0.100000
   == step: [391/391], train loss: 1.907 | train acc: 22.862% | lr: 0.100000
   == cost time: 44.0144s
 === Epoch: [8/250] === 
   == step: [100/391], train loss: 1.890 | train acc: 23.250% | lr: 0.100000
   == step: [200/391], train loss: 2.034 | train acc: 20.004% | lr: 0.100000
   == step: [300/391], train loss: 2.129 | train acc: 16.807% | lr: 0.100000
   == step: [391/391], train loss: 2.172 | train acc: 15.330% | lr: 0.100000
   == cost time: 43.4386s
 === Validate ===
   == test loss: 2.395 | test acc: 10.000%
 === Epoch: [9/250] === 
{'architecture': 'vgg19', 'data_path': './data', 'ckpt_path': './', 'ckpt_name': 'vgg19', 'num_classes': 10, 'dataset': 'cifar10', 'kernel_size': [5, 5, 3, 3, 3], 'use_gpu': True, 'input_size': 32, 'epochs': 250, 'batch_size': 128, 'test_batch': 200, 'eval_freq': 2, 'workers': 4, 'optimize': {'momentum': 0.9, 'weight_decay': 0.0001, 'nesterov': True}, 'mixup': False, 'mixup_alpha': 0.4, 'augmentation': {'normalize': True, 'random_crop': True, 'random_horizontal_filp': True, 'cutout': False, 'holes': 1, 'length': 8}, 'lr_scheduler': {'type': 'STEP', 'base_lr': 0.1, 'lr_epochs': [100, 150, 200], 'lr_mults': 0.1, 'min_lr': 0.0, 'lower_bound': -6.0, 'upper_bound': 3.0}}
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (27): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (34): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (35): ReLU(inplace=True)
    (36): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (37): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (38): ReLU(inplace=True)
    (39): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (44): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (45): ReLU(inplace=True)
    (46): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (47): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (48): ReLU(inplace=True)
    (49): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (50): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (51): ReLU(inplace=True)
    (52): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Linear(in_features=512, out_features=10, bias=True)
)
 == total parameters: 20040522
            =======  Training  =======

 === Epoch: [1/250] === 
   == step: [100/391], train loss: 3.154 | train acc:  9.930% | lr: 0.100000
   == step: [200/391], train loss: 2.721 | train acc: 10.688% | lr: 0.100000
   == step: [300/391], train loss: 2.507 | train acc: 12.875% | lr: 0.100000
   == step: [391/391], train loss: 2.392 | train acc: 14.078% | lr: 0.100000
   == cost time: 50.2156s
 === Validate ===
   == test loss: 2.483 | test acc: 12.670%
 === Epoch: [2/250] === 
   == step: [100/391], train loss: 1.985 | train acc: 19.195% | lr: 0.100000
   == step: [200/391], train loss: 1.974 | train acc: 18.641% | lr: 0.100000
   == step: [300/391], train loss: 1.969 | train acc: 18.768% | lr: 0.100000
   == step: [391/391], train loss: 1.963 | train acc: 18.758% | lr: 0.100000
   == cost time: 46.4032s
 === Validate ===
   == test loss: 2.541 | test acc: 11.220%
 === Epoch: [3/250] === 
   == step: [100/391], train loss: 1.927 | train acc: 19.750% | lr: 0.100000
   == step: [200/391], train loss: 1.923 | train acc: 20.098% | lr: 0.100000
   == step: [300/391], train loss: 1.922 | train acc: 19.904% | lr: 0.100000
   == step: [391/391], train loss: 1.925 | train acc: 19.878% | lr: 0.100000
   == cost time: 46.2895s
 === Epoch: [4/250] === 
   == step: [100/391], train loss: 1.909 | train acc: 20.828% | lr: 0.100000
   == step: [200/391], train loss: 1.902 | train acc: 21.371% | lr: 0.100000
   == step: [300/391], train loss: 1.901 | train acc: 21.768% | lr: 0.100000
   == step: [391/391], train loss: 1.902 | train acc: 21.708% | lr: 0.100000
   == cost time: 45.7748s
 === Validate ===
   == test loss: 2.273 | test acc: 16.810%
 === Epoch: [5/250] === 
   == step: [100/391], train loss: 1.904 | train acc: 21.773% | lr: 0.100000
   == step: [200/391], train loss: 1.899 | train acc: 21.969% | lr: 0.100000
   == step: [300/391], train loss: 1.898 | train acc: 22.177% | lr: 0.100000
   == step: [391/391], train loss: 1.897 | train acc: 22.306% | lr: 0.100000
   == cost time: 46.2439s
 === Epoch: [6/250] === 
   == step: [100/391], train loss: 1.887 | train acc: 22.570% | lr: 0.100000
   == step: [200/391], train loss: 1.883 | train acc: 22.730% | lr: 0.100000
   == step: [300/391], train loss: 1.884 | train acc: 22.591% | lr: 0.100000
   == step: [391/391], train loss: 1.895 | train acc: 22.232% | lr: 0.100000
   == cost time: 47.3010s
 === Validate ===
   == test loss: 2.084 | test acc: 21.500%
 === Epoch: [7/250] === 
   == step: [100/391], train loss: 1.907 | train acc: 21.148% | lr: 0.100000
   == step: [200/391], train loss: 1.893 | train acc: 22.020% | lr: 0.100000
   == step: [300/391], train loss: 1.890 | train acc: 22.107% | lr: 0.100000
   == step: [391/391], train loss: 1.888 | train acc: 22.150% | lr: 0.100000
   == cost time: 47.0314s
 === Epoch: [8/250] === 
   == step: [100/391], train loss: 1.892 | train acc: 22.281% | lr: 0.100000
   == step: [200/391], train loss: 1.892 | train acc: 21.855% | lr: 0.100000
   == step: [300/391], train loss: 1.889 | train acc: 22.065% | lr: 0.100000
   == step: [391/391], train loss: 1.885 | train acc: 22.194% | lr: 0.100000
   == cost time: 45.9412s
 === Validate ===
   == test loss: 8.699 | test acc: 10.150%
 === Epoch: [9/250] === 
   == step: [100/391], train loss: 1.875 | train acc: 22.672% | lr: 0.100000
   == step: [200/391], train loss: 1.878 | train acc: 22.738% | lr: 0.100000
   == step: [300/391], train loss: 1.877 | train acc: 22.938% | lr: 0.100000
   == step: [391/391], train loss: 1.874 | train acc: 23.088% | lr: 0.100000
   == cost time: 46.1859s
 === Epoch: [10/250] === 
   == step: [100/391], train loss: 1.877 | train acc: 22.695% | lr: 0.100000
   == step: [200/391], train loss: 1.876 | train acc: 22.742% | lr: 0.100000
   == step: [300/391], train loss: 1.881 | train acc: 22.633% | lr: 0.100000
   == step: [391/391], train loss: 1.879 | train acc: 22.710% | lr: 0.100000
   == cost time: 45.1990s
 === Validate ===
   == test loss: 2.785 | test acc: 14.350%
 === Epoch: [11/250] === 
   == step: [100/391], train loss: 1.874 | train acc: 23.281% | lr: 0.100000
   == step: [200/391], train loss: 1.879 | train acc: 22.891% | lr: 0.100000
   == step: [300/391], train loss: 1.880 | train acc: 22.779% | lr: 0.100000
   == step: [391/391], train loss: 1.877 | train acc: 22.820% | lr: 0.100000
   == cost time: 45.4760s
 === Epoch: [12/250] === 
   == step: [100/391], train loss: 1.891 | train acc: 22.641% | lr: 0.100000
   == step: [200/391], train loss: 1.881 | train acc: 23.133% | lr: 0.100000
{'architecture': 'vgg19', 'data_path': './data', 'ckpt_path': './', 'ckpt_name': 'vgg19', 'num_classes': 10, 'dataset': 'cifar10', 'kernel_size': [5, 5, 3, 3, 3], 'use_gpu': True, 'input_size': 32, 'epochs': 250, 'batch_size': 128, 'test_batch': 200, 'eval_freq': 2, 'workers': 4, 'optimize': {'momentum': 0.9, 'weight_decay': 0.0001, 'nesterov': True}, 'mixup': False, 'mixup_alpha': 0.4, 'augmentation': {'normalize': True, 'random_crop': True, 'random_horizontal_filp': True, 'cutout': False, 'holes': 1, 'length': 8}, 'lr_scheduler': {'type': 'STEP', 'base_lr': 0.1, 'lr_epochs': [100, 150, 200], 'lr_mults': 0.1, 'min_lr': 0.0, 'lower_bound': -6.0, 'upper_bound': 3.0}}
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (27): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (34): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (35): ReLU(inplace=True)
    (36): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (37): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (38): ReLU(inplace=True)
    (39): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (44): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (45): ReLU(inplace=True)
    (46): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (47): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (48): ReLU(inplace=True)
    (49): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (50): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (51): ReLU(inplace=True)
    (52): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=10, bias=True)
  )
)
 == total parameters: 38958922
            =======  Training  =======

 === Epoch: [1/250] === 
   == step: [100/391], train loss: 907.449 | train acc:  9.734% | lr: 0.100000
   == step: [200/391], train loss: 454.879 | train acc:  9.828% | lr: 0.100000
   == step: [300/391], train loss: 304.032 | train acc: 10.065% | lr: 0.100000
   == step: [391/391], train loss: 233.824 | train acc: 10.068% | lr: 0.100000
   == cost time: 51.7913s
 === Validate ===
   == test loss: 2.306 | test acc: 10.000%
 === Epoch: [2/250] === 
   == step: [100/391], train loss: 2.315 | train acc:  9.758% | lr: 0.100000
   == step: [200/391], train loss: 2.349 | train acc:  9.875% | lr: 0.100000
   == step: [300/391], train loss: 2.335 | train acc:  9.927% | lr: 0.100000
   == step: [391/391], train loss: 2.328 | train acc:  9.926% | lr: 0.100000
   == cost time: 47.5912s
 === Validate ===
   == test loss: 2.306 | test acc: 10.000%
 === Epoch: [3/250] === 
   == step: [100/391], train loss: 2.349 | train acc: 10.172% | lr: 0.100000
   == step: [200/391], train loss: 2.382 | train acc: 10.074% | lr: 0.100000
   == step: [300/391], train loss: 2.373 | train acc:  9.969% | lr: 0.100000
   == step: [391/391], train loss: 2.358 | train acc:  9.996% | lr: 0.100000
   == cost time: 48.0759s
 === Epoch: [4/250] === 
{'architecture': 'vgg19', 'data_path': './data', 'ckpt_path': './', 'ckpt_name': 'vgg19', 'num_classes': 10, 'dataset': 'cifar10', 'kernel_size': [5, 5, 3, 3, 3], 'use_gpu': True, 'input_size': 32, 'epochs': 250, 'batch_size': 128, 'test_batch': 200, 'eval_freq': 2, 'workers': 4, 'optimize': {'momentum': 0.9, 'weight_decay': 0.0001, 'nesterov': True}, 'mixup': False, 'mixup_alpha': 0.4, 'augmentation': {'normalize': True, 'random_crop': True, 'random_horizontal_filp': True, 'cutout': False, 'holes': 1, 'length': 8}, 'lr_scheduler': {'type': 'STEP', 'base_lr': 0.1, 'lr_epochs': [100, 150, 200], 'lr_mults': 0.1, 'min_lr': 0.0, 'lower_bound': -6.0, 'upper_bound': 3.0}}
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (27): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (34): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (35): ReLU(inplace=True)
    (36): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (37): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (38): ReLU(inplace=True)
    (39): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (44): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (45): ReLU(inplace=True)
    (46): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (47): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (48): ReLU(inplace=True)
    (49): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (50): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (51): ReLU(inplace=True)
    (52): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=10, bias=True)
  )
)
 == total parameters: 38958922
            =======  Training  =======

 === Epoch: [1/250] === 
   == step: [100/391], train loss: 2066.407 | train acc:  9.836% | lr: 0.100000
   == step: [200/391], train loss: 1034.359 | train acc:  9.680% | lr: 0.100000
   == step: [300/391], train loss: 690.346 | train acc:  9.583% | lr: 0.100000
   == step: [391/391], train loss: 530.217 | train acc:  9.668% | lr: 0.100000
   == cost time: 54.6597s
 === Validate ===
   == test loss: 5.146 | test acc:  9.910%
 === Epoch: [2/250] === 
   == step: [100/391], train loss: 2.321 | train acc: 10.000% | lr: 0.100000
   == step: [200/391], train loss: 2.319 | train acc:  9.711% | lr: 0.100000
   == step: [300/391], train loss: 2.322 | train acc:  9.833% | lr: 0.100000
   == step: [391/391], train loss: 2.333 | train acc:  9.876% | lr: 0.100000
   == cost time: 51.9340s
 === Validate ===
   == test loss: 2.789 | test acc: 10.240%
 === Epoch: [3/250] === 
   == step: [100/391], train loss: 2.331 | train acc:  9.906% | lr: 0.100000
   == step: [200/391], train loss: 2.337 | train acc:  9.980% | lr: 0.100000
   == step: [300/391], train loss: 2.330 | train acc:  9.943% | lr: 0.100000
   == step: [391/391], train loss: 2.332 | train acc:  9.960% | lr: 0.100000
   == cost time: 54.0714s
 === Epoch: [4/250] === 
   == step: [100/391], train loss: 2.350 | train acc: 10.172% | lr: 0.100000
   == step: [200/391], train loss: 2.347 | train acc: 10.262% | lr: 0.100000
   == step: [300/391], train loss: 2.342 | train acc: 10.174% | lr: 0.100000
   == step: [391/391], train loss: 2.339 | train acc: 10.058% | lr: 0.100000
   == cost time: 53.2559s
 === Validate ===
   == test loss: 2.316 | test acc: 10.130%
 === Epoch: [5/250] === 
   == step: [100/391], train loss: 2.362 | train acc:  9.883% | lr: 0.100000
   == step: [200/391], train loss: 2.352 | train acc: 10.125% | lr: 0.100000
   == step: [300/391], train loss: 2.377 | train acc: 10.224% | lr: 0.100000
   == step: [391/391], train loss: 2.374 | train acc: 10.162% | lr: 0.100000
   == cost time: 52.0731s
 === Epoch: [6/250] === 
   == step: [100/391], train loss: 2.369 | train acc:  9.984% | lr: 0.100000
   == step: [200/391], train loss: 2.351 | train acc:  9.961% | lr: 0.100000
   == step: [300/391], train loss: 2.349 | train acc:  9.951% | lr: 0.100000
   == step: [391/391], train loss: 2.345 | train acc: 10.032% | lr: 0.100000
   == cost time: 51.6707s
 === Validate ===
{'architecture': 'vgg19', 'data_path': './data', 'ckpt_path': './', 'ckpt_name': 'vgg19', 'num_classes': 10, 'dataset': 'cifar10', 'kernel_size': [5, 5, 3, 3, 3], 'use_gpu': True, 'input_size': 32, 'epochs': 250, 'batch_size': 128, 'test_batch': 200, 'eval_freq': 2, 'workers': 4, 'optimize': {'momentum': 0.9, 'weight_decay': 0.0001, 'nesterov': True}, 'mixup': False, 'mixup_alpha': 0.4, 'augmentation': {'normalize': True, 'random_crop': True, 'random_horizontal_filp': True, 'cutout': False, 'holes': 1, 'length': 8}, 'lr_scheduler': {'type': 'STEP', 'base_lr': 0.1, 'lr_epochs': [100, 150, 200], 'lr_mults': 0.1, 'min_lr': 0.0, 'lower_bound': -6.0, 'upper_bound': 3.0}}
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace=True)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace=True)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace=True)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace=True)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace=True)
    (23): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (25): ReLU(inplace=True)
    (26): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (27): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace=True)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace=True)
    (33): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (34): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (35): ReLU(inplace=True)
    (36): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (37): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (38): ReLU(inplace=True)
    (39): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace=True)
    (43): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (44): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (45): ReLU(inplace=True)
    (46): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (47): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (48): ReLU(inplace=True)
    (49): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (50): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (51): ReLU(inplace=True)
    (52): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Sequential(
    (0): Linear(in_features=512, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=10, bias=True)
  )
)
 == total parameters: 38958922
            =======  Training  =======

 === Epoch: [1/250] === 
   == step: [100/391], train loss: 2302.741 | train acc: 10.102% | lr: 0.100000
   == step: [200/391], train loss: 1152.528 | train acc: 10.184% | lr: 0.100000
